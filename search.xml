<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springboot+mybatis最新版注解配置实现CURD]]></title>
    <url>%2Fspringboot%2Bmybatis%E6%9C%80%E6%96%B0%E7%89%88%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0CURD.html</url>
    <content type="text"><![CDATA[最近开始学后端，然后直接上手了springboot+mybatis。然后就实现了一个小例子，花了我整整一天时间。在这做个小记录，也给在用最新版的同学一个参考。springboot整合mybatis时，我用的是mybatis3.x最新版的注解方式配置的，这样实现的接口看起来更简单点（确实简单点）。建项目啥的我在这就不说了，直接上主要配置吧。 1、applicaltion.properties的配置：1234567spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=123456mybatis.type-aliases-package=com.xiangzhang.entity (表的实体类所在的包）# 驼峰命名规范 如：数据库字段是 order_id 那么 实体字段就要写成 orderIdmybatis.configuration.map-underscore-to-camel-case=true 2、pom.xml的依赖：123456789101112131415161718192021222324252627282930313233343536373839404142&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MYSQL包 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.46&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 引入第三方数据源 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 默认就内嵌了Tomcat 容器，如需要更换容器也极其简单--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 测试包,当我们使用 mvn package 的时候该包并不会被打入,因为它的生命周期只在 test 之内--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; 3、实体类User123456789101112131415package com.xiangzhang.entity;import lombok.Data;import java.io.Serializable;@Datapublic class User implements Serializable &#123; private static final long serialVersionUID = 8655851615465363473L; private int id; private String name; private float hp; private float damage;&#125; 在这里用了Lombok的@Data注解功能，可以省去getter和setter的代码，可以减少不少的代码量，加快开发速度。lombok需要另外引入依赖。 4、UserMapper：通过注解方式实现的接口12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.xiangzhang.mapper;import com.xiangzhang.entity.User;import org.apache.ibatis.annotations.*;import java.util.List;/** * 通过注解方式完成接口的实现 */@Mapperpublic interface UserMapper &#123; /**根据英雄id查询英雄属性 * @param 传入的id * @return 查询的结果集 */ @Select("select * from hero where id = #&#123;id&#125;") List&lt;User&gt; returnById(@Param("id") int id); /** * 返回hero表中的所有数据 * @return 所有结果集 */ @Select("select * from hero") List&lt;User&gt; returnResult(); /** * 实现数据插入功能 * @param name 英雄名 * @param hp 英雄血量值 * @param damage 英雄伤害值 * @return 插入是否成功 */ @Insert("insert into hero(name, hp, damage) VALUES(#&#123;name&#125;, #&#123;hp&#125;, #&#123;damage&#125;)") int insert(@Param("name") String name,@Param("hp") float hp,@Param("damage") float damage); /** *根据英雄id更新英雄名 * @param name 英雄名 * @param id 英雄id * @return 更新是否成功 */ @Update("update hero set name = #&#123;name&#125; where id = #&#123;id&#125;") int update(@Param("name") String name,@Param("id") int id); /** * 根据英雄id删除该英雄 * @param id 英雄id * @return 删除是否成功 */ @Delete("delete from hero where id = #&#123;id&#125;") int delete(@Param("id") int id);&#125; 5、最后再来个测试类代码，结果用log方式输出，在控制台可以观察：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.xiangzhang;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import com.xiangzhang.entity.User;import com.xiangzhang.mapper.UserMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class DemoApplicationTests &#123; private static final Logger log = LoggerFactory.getLogger(DemoApplicationTests.class); @Autowired private UserMapper userMapper; @Test public void test_curd() throws Exception&#123; final int row1 = userMapper.insert("露娜",2500,4500); if(row1 == 1)&#123; log.info("[添加第一个结果] - [&#123;&#125;]","成功"); &#125; final int row2 = userMapper.insert("貂蝉",1200,5600); if(row2 == 1)&#123; log.info("[添加第二个结果] - [&#123;&#125;]","成功"); &#125; final List&lt;User&gt; user = userMapper.returnById(2); log.info("根据用户id查询 - [&#123;&#125;]",user); final int row3 = userMapper.update("狄仁杰",1); if(row3 == 1)&#123; log.info("[更新英雄名] - [&#123;&#125;]","成功"); &#125; final int row4 = userMapper.delete(11); if(row4 == 1)&#123; log.info("[删除英雄] - [&#123;&#125;]","成功"); &#125; final List&lt;User&gt; users = userMapper.returnResult(); log.info("查询hero表的所有数据 - [&#123;&#125;]",users); &#125;&#125; 如果对你有所帮助，记得点个赞哦。]]></content>
      <categories>
        <category>web后端</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli3+bootstrap3实现响应式布局]]></title>
    <url>%2Fvue-cli3%20%2B%20bootstrap3%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80.html</url>
    <content type="text"><![CDATA[利用vue-cli3搭建的脚手架，搭配bootstrap3实现移动端和PC端的适配。 1、用px2rem配合lib-flexible，省略rem的计算，大大加快开发速度。lib-flexible作用：让网页根据设备dpr和宽度，利用viewport和html根元素的font-size配合rem来适配不同尺寸的移动端设备安装： 1npm install lib-flexible 引入：入口文件main.js中： 1import "lib-flexible/flexible.js" 2、使用VW。了解下vw 与 vh单位，以viewport为基准，1vw 与 1vh分别为window.innerWidth 与 window.innerHeight的百分之一安装： 1npm i postcss-px-to-viewport -save -dev 在package.json中配置如下： 12345678910111213141516"postcss": &#123; "plugins": &#123; "autoprefixer": &#123;&#125;, "postcss-pxtorem": &#123; "rootValue": 32, "propList": ["*"] &#125; &#125;, "plugins": &#123; "autoprefixer": &#123;&#125;, "postcss-px-to-viewport": &#123; "viewportWidth": 750, "minPixelValue": 1 &#125; &#125; &#125;, 3、利用bootstrap实现响应式图片在 Bootstrap 版本 3 中，通过为图片添加 .img-responsive 类可以让图片支持响应式布局。其实质是为图片设置了 max-width: 100%;、 height: auto; 和 display: block; 属性，从而让图片在其父元素中更好的缩放。对于图片的大小限制一定要在图片的父级元素进行限制。 4、利用bootstrap的栅格系统，下面列一下栅格系统的参数： 超小屏手机 (&lt;768px) 小屏幕平板(&gt;=768px) 中等屏桌面(&gt;=992px) 大屏桌面(&gt;=1200px) 类前缀 .col-xs .col-sm .col-md .col-lg 列数 12 12 12 12 .container最大宽度 None(自动) 750px 970px 1170px 举个移动设备和桌面的例子：123456789101112131415161718&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --&gt;&lt;div class="row"&gt; &lt;div class="col-xs-12 col-md-8"&gt;.col-xs-12 .col-md-8&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt;&lt;/div&gt;&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --&gt;&lt;div class="row"&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt; &lt;div class="col-xs-6 col-md-4"&gt;.col-xs-6 .col-md-4&lt;/div&gt;&lt;/div&gt;&lt;!-- Columns are always 50% wide, on mobile and desktop --&gt;&lt;div class="row"&gt; &lt;div class="col-xs-6"&gt;.col-xs-6&lt;/div&gt; &lt;div class="col-xs-6"&gt;.col-xs-6&lt;/div&gt;&lt;/div&gt; 还有更多对响应式的支持，就不一一列举了。]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>响应式布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
